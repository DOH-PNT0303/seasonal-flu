localrules: all_live, download_all, download_titers, download_sequences
ruleorder: select_strains_countries > select_strains
ruleorder: exportv1 > exportv2
ruleorder: rename_output_v1 > rename_output_v2

segments = ['ha', 'na']
lineages = ['h3n2', 'h1n1pdm', 'vic', 'yam']
resolutions = ['2y']

passages = ['cell']
centers = ['cdc']
assays = ['hi']

include: "Snakefile_base"

countries = {"netherlands":["netherlands"]} #, "france":["france"], "UK":["united_kingdom"], "scandinavia":["norway", "sweden", "denmark"]}

def focal_vpm(v):
    focal_vpm = {'6m':300, '2y':70, '3y':50, '6y':20, '12y':10, '60y':4}
    return focal_vpm[v.resolution] if v.resolution in focal_vpm else 5

def other_vpm(v):
    return vpm(v) - focal_vpm(v)

rule all_country:
    input:
        auspice_tree = expand("auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_tree.json",
                              center=countries, lineage=lineages, segment=segments, resolution=resolutions),
        auspice_tip_frequencies = expand("auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_tip-frequencies.json",
                              center=countries, lineage=lineages, segment=segments, resolution=resolutions)

# separate rule for interaction with fauna
rule download_all:
    input:
        titers = expand("data/{center}_{lineage}_{passage}_{assay}_titers.tsv",
                         center=["who"], lineage=lineages, passage=passages, assay=assays),
        sequences = expand("data/{lineage}_{segment}.fasta", lineage=lineages, segment=segments)


def _get_focus_countries(wildcards):
    return " ".join(countries[wildcards.center])

def _get_node_data_for_export(wildcards):
    """Return a list of node data files to include for a given build's wildcards.
    """
    # Define inputs shared by all builds.
    inputs = [
        rules.refine.output.node_data,
        rules.ancestral.output.node_data,
        rules.translate.output.node_data,
        rules.titers_tree.output.titers_model,
        rules.titers_sub.output.titers_model,
        rules.clades.output.clades,
        rules.traits.output.node_data,
        rules.lbi.output.lbi
    ]

    # Only request a distance file for builds that have distance map
    # configurations defined.
    if _get_build_distance_map_config(wildcards) is not None:
        inputs.append(rules.distances.output.distances)

    # Convert input files from wildcard strings to real file names.
    inputs = [input_file.format(**wildcards) for input_file in inputs]
    return inputs

rule exportv1:
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata,
        auspice_config = "config/auspice_config_v1_{lineage}.json",
        node_data = _get_node_data_for_export
    output:
        auspice_main = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_tree.json",
        auspice_meta = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_meta.json"
    shell:
        """
        augur export v1 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.node_data} \
            --auspice-config {input.auspice_config} \
            --output-tree {output.auspice_main} \
            --output-meta {output.auspice_meta} \
            --minify-json
        """


rule exportv2:
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata,
        auspice_config = files.auspice_config,
        node_data = _get_node_data_for_export
    output:
        auspice_main = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_tree.json",
        auspice_rs = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_{passage}_{assay}_tree_root-sequence.json",
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.node_data} \
            --auspice-config {input.auspice_config} \
            --output {output.auspice_main} \
            --minify-json
        """

rule rename_output_v2:
    input:
        frequencies = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_cell_hi_tip-frequencies.json",
        tree = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_cell_hi_tree.json",
        root_seq = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_cell_hi_tree_root-sequence.json"
    output:
        tree = "auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}.json",
        root_seq = "auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_root-sequence.json",
        frequencies = "auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_tip-frequencies.json"
    shell:
        '''
        mv {input.tree} {output.tree} &
        mv {input.frequencies} {output.frequencies} &
        mv {input.root_seq} {output.root_seq}
        '''



rule rename_output_v1:
    input:
        tree = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_cell_hi_tree.json",
        meta = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_cell_hi_meta.json",
        frequencies = "auspice/flu_{center}_{lineage}_{segment}_{resolution}_cell_hi_tip-frequencies.json",
    output:
        tree = "auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_tree.json",
        meta = "auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_meta.json",
        frequencies = "auspice_FBC/FluByCountry_{center}_{lineage}_{segment}_{resolution}_tip-frequencies.json"
    shell:
        '''
        mv {input.tree} {output.tree} &
        mv {input.frequencies} {output.frequencies} &
        mv {input.meta} {output.meta}
        '''


rule select_strains_countries:
    input:
        sequences = expand("results/filtered_{{lineage}}_{segment}_{{passage}}.fasta", segment=segments),
        metadata = expand("results/metadata_{{lineage}}_{segment}.tsv", segment=segments),
        titers = "data/who_{lineage}_{passage}_{assay}_titers.tsv",
        include = files.references
    output:
        strains = "results/strains_{center}_{lineage}_{resolution}_{passage}_{assay}.txt",
    params:
        viruses_per_month = other_vpm,
        extra_viruses_per_month = focal_vpm,
        focus_countries = _get_focus_countries
    shell:
        """
        python3 scripts/select_strains.py \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --segments {segments} \
            --focus-countries {params.focus_countries} \
            --extra-viruses-per-month {params.extra_viruses_per_month} \
            --include {input.include} \
            --lineage {wildcards.lineage} \
            --resolution {wildcards.resolution} \
            --viruses-per-month {params.viruses_per_month} \
            --titers {input.titers} \
            --output {output.strains}
        """
